工厂模式：
    DEMO解读：
        执行案例：designPatterns.FactoryTests.demo01
        内容：
            1：Alienware.class 和 MacBook.class 同时实现 Computer.interface 接口
            2：通过不同的情况 （if ... else...）,通过 不同的情况，加载不同的模式下的内容，例如， new MacBook().这个时候就会默认去加载内容，
                Computer computer = new MacBook();
                这个时候调用 computer 的方式的话就会默认的去加载所对应的内容
              通常这个时候会封装一个中间者去统一管理，类似案例中的Middle.suggest()

        优点：
            1、一个调用者想创建一个对象，只要知道其名称就可以了。
            2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。
            3、屏蔽产品的具体实现，调用者只关心产品的接口。

        缺点：
            每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。

        使用场景：
            1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。
            2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。
            3、设计一个连接服务器的框架，需要三个协议，"POP3"、"IMAP"、"HTTP"，可以把这三个作为产品类，共同实现一个接口。

注意事项：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。